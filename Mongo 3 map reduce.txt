-- развернем ВМ mongo 4.41
gcloud beta compute --project=calm-tendril-290110 instances create mongo --zone=us-central1-a --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=322426944095-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=ubuntu-2004-focal-v20200907 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-ssd --boot-disk-device-name=mongo --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

gcloud compute ssh mongo

-- https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/
-- если проблема с установкой
-- https://stackoverflow.com/questions/63510212/mongod-command-on-linuxubuntu-spits-out-random-messages

-- установим монго
$ wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add - && echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list && sudo apt-get update && sudo apt-get install -y mongodb-org

$ sudo mkdir /home/mongo &&  sudo mkdir /home/mongo/db1 && sudo chmod 777 /home/mongo/db1
$ mongod --dbpath /home/mongo/db1 --port 27001 --fork --logpath /home/mongo/db1/db1.log --pidfilepath /home/mongo/db1/db1.pid
$ ps aux | grep mongo| grep -Ev "grep" //посмотрим, что процесс успешно запущен

$ mongo --port 27001

> db.orders.insertMany([
    {custID:"10001",amount:500,status:"A"},
    {custID:"10001",amount:250,status:"A"},
    {custID:"10002",amount:200,status:"A"},
    {custID:"10001",amount: 300, status:"D"}])

> db.orders.aggregate([
   { $match: { status: "A" } },
   { $group: { _id: "$custID", total: { $sum: "$amount" } } }
])

> db.inventory.insert([
{ _id: 2, item: { name: "cd", code: "123" }, qty: 20, tags: [ "B" ] },
{ _id: 3, item: { name: "ij", code: "456" }, qty: 25, tags: [ "A", "B" ] },
{ _id: 4, item: { name: "xy", code: "456" }, qty: 30, tags: [ "B", "A" ] },
{ _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [ [ "A", "B" ], "C" ] },
{ _id: 6, item: { name: "mn", code: "222" }, qty: 20, tags: [ [ "A", "B" ], "C" ] },
{ _id: 1, item: { name: "ab", code: "123" }, qty: 15, tags: [ "A", "B", "C" ] }])


> db.inventory.aggregate([
   { $match: { tags: ["B"] } },
   { $group: { _id: "$item.name", total: { $sum: "$qty" } } }
])

> db.inventory.aggregate([
   { $match: { tags: "B" } },
   { $group: { _id: "$item.name", total: { $sum: "$qty" } } }
])

-- поиск в подмассиве 
db.inventory.aggregate([
   { $match: { "tags": { $elemMatch: { $elemMatch:{ $in :["B"] } } } } },
   { $group: { _id: "$item.name", total: { $sum: "$qty" } } }
])

-- если не нужна агрегация
db.inventory.aggregate([
   { $match: { "tags": { $elemMatch: { $elemMatch:{ $in :["B"] } } } } }
])

https://docs.mongodb.com/manual/tutorial/query-arrays/

-- посчитать мин, макс, среднее по всей коллекции
> db.inventory.aggregate([
    { $match: { tags: "B" } },
    { $group: {  
                _id: "$item.name", 
                total: { $sum: "$qty"},
                avg: { $avg: "$qty"},
                min: { $min: "$qty"},
                max: { $max: "$qty"}                
              } 
    }
])

-- сгруппируем по константе
db.inventory.aggregate([
    { $match: { tags: "B" } },
    { $group: {  
                _id: 1, 
                total: { $sum: "$qty"},
                avg: { $avg: "$qty"},
                min: { $min: "$qty"},
                max: { $max: "$qty"}                
              } 
    }
])

--выбрать все поддокументы
db.inventory.find({},{"item" : 1 })

-- выбрать без вывод item, чисто name и code
db.inventory.aggregate([{$addFields : {itemName : "$item.name", itemCode : "$item.code"}}])

db.inventory.aggregate([{$addFields : {itemName : "$item.name", itemCode : "$item.code"}}, 
                        {$project : {itemName : 1, itemCode : 1} }])

db.inventory.aggregate([{$addFields : {itemName : "$item.name", itemCode : "$item.code"}}, 
                        {$project : {itemName : 1, itemCode : 1, _id : 0} }])

$join
https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/#pipe._S_lookup

-- аналог LEFT join
> db.orders2.insert([
   { "_id" : 1, "item" : "almonds", "price" : 12, "quantity" : 2 },
   { "_id" : 2, "item" : "pecans", "price" : 20, "quantity" : 1 },
   { "_id" : 3  }
])

> db.inventory2.insert([
   { "_id" : 1, "sku" : "almonds", description: "product 1", "instock" : 120 },
   { "_id" : 2, "sku" : "bread", description: "product 2", "instock" : 80 },
   { "_id" : 3, "sku" : "cashews", description: "product 3", "instock" : 60 },
   { "_id" : 4, "sku" : "pecans", description: "product 4", "instock" : 70 },
   { "_id" : 5, "sku": null, description: "Incomplete" },
   { "_id" : 6 }
])

db.inventory2.insert([
   { "_id" : 11, "sku" : "almonds", description: "product 1", "instock" : 120 },
   { "_id" : 12, "sku" : "bread", description: "product 2", "instock" : 80 },
   { "_id" : 13, "sku" : "cashews", description: "product 3", "instock" : 60 },
   { "_id" : 14, "sku" : "pecans", description: "product 4", "instock" : 70 },
   { "_id" : 15, "sku": null, description: "Incomplete" },
   { "_id" : 16 }
])

!!! джойн с другой БД
как то так https://overcoder.net/q/8177/%D0%BA%D0%B0%D0%BA-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B8%D1%82%D1%8C-%D1%8D%D0%BA%D0%B2%D0%B8%D0%B2%D0%B0%D0%BB%D0%B5%D0%BD%D1%82-sql-join-%D0%B2-mongodb

!!! как реализовать inner join

> db.orders2.aggregate([
   {
     $lookup:
       {
         from: "inventory2",
         localField: "item",
         foreignField: "sku",
         as: "inventory_docs"
       }
  }
])


-- сохранить в другую коллекцию
db.orders2.aggregate([
   {
     $lookup:
       {
         from: "inventory2",
         localField: "item",
         foreignField: "sku",
         as: "inventory_docs"
       }
  },
    { $out : "results" }
])

-- merge
https://docs.mongodb.com/manual/reference/operator/aggregation/merge/#pipe._S_merge


Map Reduce
-- хотим узнать количество интересов у группы людей

> db.users.insertMany([
    {name : "John2",age : 23,interests : ["football", "IT", "women", "postgres"]},
    {name : "Daw2",age : 23,interests : ["football", "IT", "MongoDB"]},
    {name : "Jane2",age : 33,interests : ["cook",  "men"]}]);

> function map(){
    for(var i in this.interests) {
        emit(this.interests[i], 1);
    } //this.interests.forEach(function(interest){ emit(interest, 1); });
}

> function reduce(key, values) {
    var sum = 0;
    for(var i in values) {
        sum += values[i];
    }
    return sum; //return Array.sum(values)
}

> db.users.mapReduce(map, reduce,{out:"interests"})
> db.interests.find()

-- мы хотим узнать среднее количество интересов у людей разных возрастов
> function map(){
    emit(this.age, {interests_count: this.interests.length, count: 1});
}

> function reduce(key, values) {
    var sum = 0;
    var count = 0;
    for(var i in values){
        count += values[i].count;
        sum += values[i].interests_count;
    }
    return {interests_count: sum, count: count};
}

> function finalize(key, reducedValue) {
        return reducedValue.interests_count / reducedValue.count;
    }

> db.users.mapReduce(map, reduce, {finalize: finalize, out:"interests_by_age"})
> db.interests_by_age.find()

db.users.insertOne({name : "John2",age : 23,interests : ["mysql"]})

-- distinct
db.inventory3.insertMany([
{ "_id": 1, "dept": "A", "item": { "sku": "111", "color": "red" }, "sizes": [ "S", "M" ] },
{ "_id": 2, "dept": "A", "item": { "sku": "111", "color": "blue" }, "sizes": [ "M", "L" ] },
{ "_id": 3, "dept": "B", "item": { "sku": "222", "color": "blue" }, "sizes": "S" },
{ "_id": 4, "dept": "A", "item": { "sku": "333", "color": "black" }, "sizes": [ "S" ] }])

db.inventory3.distinct( "dept" )
db.inventory3.distinct( "item.sku", { dept: "A" } )
