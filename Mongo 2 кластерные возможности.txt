-- развернем ВМ mongo3
gcloud beta compute --project=calm-tendril-290110 instances create mongo3 --zone=us-central1-a --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=322426944095-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=ubuntu-2004-focal-v20200907 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-ssd --boot-disk-device-name=mongo3 --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

gcloud compute ssh mongo3

sudo apt update && sudo apt upgrade 

sudo apt install mongodb

-- Master & Slave

$ sudo mkdir /home/mongo && sudo mkdir /home/mongo/{dbms1,dbms2} && sudo chmod 777 /home/mongo/{dbms1,dbms2}
$ mongod --master --dbpath /home/mongo/dbms1 --port 27001 --fork --logpath /home/mongo/dbms1/Master.log --pidfilepath /home/mongo/dbms1/Master.pid
$ mongod --slave --dbpath /home/mongo/dbms2 --port 27002 --fork --logpath /home/mongo/dbms2/Slave.log --pidfilepath /home/mongo/dbms2/Slave.pid
$ ps aux | grep mongo| grep -Ev "grep" //посмотрим, что процессу успешно запущены
$ mongo --port 27001
> rs.printReplicationInfo()
> db.serverStatus()
> db.isMaster()

on slave:
$ gcloud compute ssh mongo3
$ mongo --port 27002
> use local;
> db.sources.insert( { host:"localhost:27001" } );
> db.sources.find();
> rs.printReplicationInfo()
> show dbs;
> rs.slaveOk();
> db.test.insert({});
> db.isMaster()

-- развернем ВМ mongo 4.41
gcloud beta compute --project=calm-tendril-290110 instances create mongo --zone=us-central1-a --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=322426944095-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=ubuntu-2004-focal-v20200907 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-ssd --boot-disk-device-name=mongo --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

gcloud compute ssh mongo

https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/

-- https://stackoverflow.com/questions/63510212/mongod-command-on-linuxubuntu-spits-out-random-messages

wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add - && echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list && sudo apt-get update && sudo apt-get install -y mongodb-org

-- Replica set

$ sudo mkdir /home/mongo &&  sudo mkdir /home/mongo/{db1,db2,db3,db4} && sudo chmod 777 /home/mongo/{db1,db2,db3,db4}
$ mongod --dbpath /home/mongo/db1 --port 27001 --replSet RS --fork --logpath /home/mongo/db1/db1.log --pidfilepath /home/mongo/db1/db1.pid
$ mongod --dbpath /home/mongo/db2 --port 27002 --replSet RS --fork --logpath /home/mongo/db2/db2.log --pidfilepath /home/mongo/db2/db2.pid
$ mongod --dbpath /home/mongo/db3 --port 27003 --replSet RS --fork --logpath /home/mongo/db3/db3.log --pidfilepath /home/mongo/db3/db3.pid
$ ps aux | grep mongo| grep -Ev "grep" //посмотрим, что процессу успешно запущены
$ mongo --port 27001
> rs.status()

-- проинициализируем кластер
> rs.initiate({"_id" : "RS", members : [{"_id" : 0, priority : 3, host : "127.0.0.1:27001"},
{"_id" : 1, host : "127.0.0.1:27002"},
{"_id" : 2, host : "127.0.0.1:27003", arbiterOnly : true}]});
> rs.printReplicationInfo()

-- добавим 4 ноду
$ mongod --dbpath /home/mongo/db4 --port 27004 --replSet RS --fork --logpath /home/mongo/db4/db4.log --pidfilepath /home/mongo/db4/db4.pid
> rs.add("127.0.0.1:27004")
> rs.addArb("127.0.0.1:27004") //если добавить арбитра
> rs.remove("localhost:27002")
> rs.remove("127.0.0.1:27002")
> db.isMaster()

? будем kill primary?
db.user.insert({"name":"Ivan"},{writeConcern: {w: "majority", j: true, wtimeout: 500}})
db.user.find({"name":"Ivan"},{writeConcern: {w: "majority", j: true, wtimeout: 500}})
> use admin
> db.shutdownServer() - потушить основной, затем арбитра и секондари


Создадим 2 репликасета с шардами

-- развернем ВМ mongo 4.41
gcloud beta compute --project=calm-tendril-290110 instances create mongos --zone=us-central1-a --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=322426944095-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=ubuntu-2004-focal-v20200907 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-ssd --boot-disk-device-name=mongos --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

gcloud compute ssh mongos

wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add - && echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list && sudo apt-get update && sudo apt-get install -y mongodb-org

https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/

Создадим репликасет с конфигурацией шарда

sudo mkdir /home/mongo && sudo mkdir /home/mongo/{dbc1,dbc2,dbc3} && sudo chmod 777 /home/mongo/{dbc1,dbc2,dbc3}
mongod --configsvr --dbpath /home/mongo/dbc1 --port 27001 --replSet RScfg --fork --logpath /home/mongo/dbc1/dbc1.log --pidfilepath /home/mongo/dbc1/dbc1.pid
mongod --configsvr --dbpath /home/mongo/dbc2 --port 27002 --replSet RScfg --fork --logpath /home/mongo/dbc2/dbc2.log --pidfilepath /home/mongo/dbc2/dbc2.pid
mongod --configsvr --dbpath /home/mongo/dbc3 --port 27003 --replSet RScfg --fork --logpath /home/mongo/dbc3/dbc3.log --pidfilepath /home/mongo/dbc3/dbc3.pid

$ ps aux | grep mongo| grep -Ev "grep" //посмотрим, что процессу успешно запущены
$ mongo --port 27001
> rs.status()
-- ошибка
> rs.initiate({"_id" : "RScfg", configsvr: true, members : [{"_id" : 0, priority : 3, host : "127.0.0.1:27001"},{"_id" : 1, host : "127.0.0.1:27002"},{"_id" : 2, host : "127.0.0.1:27003", arbiterOnly : true}]});
-- ок
> rs.initiate({"_id" : "RScfg", configsvr: true, members : [{"_id" : 0, priority : 3, host : "127.0.0.1:27001"},{"_id" : 1, host : "127.0.0.1:27002"},{"_id" : 2, host : "127.0.0.1:27003"}]});

Создадим 2 репликасета

sudo sudo mkdir /home/mongo/{db1,db2,db3,db4,db5,db6} && sudo chmod 777 /home/mongo/{db1,db2,db3,db4,db5,db6}
mongod --shardsvr --dbpath /home/mongo/db1 --port 27011 --replSet RS1 --fork --logpath /home/mongo/db1/db1.log --pidfilepath /home/mongo/db1/db1.pid
mongod --shardsvr --dbpath /home/mongo/db2 --port 27012 --replSet RS1 --fork --logpath /home/mongo/db2/db2.log --pidfilepath /home/mongo/db2/db2.pid
mongod --shardsvr --dbpath /home/mongo/db3 --port 27013 --replSet RS1 --fork --logpath /home/mongo/db3/db3.log --pidfilepath /home/mongo/db3/db3.pid
mongod --shardsvr --dbpath /home/mongo/db4 --port 27021 --replSet RS2 --fork --logpath /home/mongo/db4/db4.log --pidfilepath /home/mongo/db4/db4.pid
mongod --shardsvr --dbpath /home/mongo/db5 --port 27022 --replSet RS2 --fork --logpath /home/mongo/db5/db5.log --pidfilepath /home/mongo/db5/db5.pid
mongod --shardsvr --dbpath /home/mongo/db6 --port 27023 --replSet RS2 --fork --logpath /home/mongo/db6/db6.log --pidfilepath /home/mongo/db6/db6.pid

$ ps aux | grep mongo| grep -Ev "grep" //посмотрим, что процессу успешно запущены
$ mongo --port 27011
> rs.initiate({"_id" : "RS1", members : [{"_id" : 0, priority : 3, host : "127.0.0.1:27011"},{"_id" : 1, host : "127.0.0.1:27012"},{"_id" : 2, host : "127.0.0.1:27013", arbiterOnly : true}]});
$ mongo --port 27021
> rs.initiate({"_id" : "RS2", members : [{"_id" : 0, priority : 3, host : "127.0.0.1:27021"},{"_id" : 1, host : "127.0.0.1:27022"},{"_id" : 2, host : "127.0.0.1:27023", arbiterOnly : true}]});

Создадим шардированный кластер %)
$ mongos --configdb RScfg/127.0.0.1:27001,127.0.0.1:27002,127.0.0.1:27003 --port 27000

-- запускаем в 2 экземплярах для отказоустойчивости
$ mongos --configdb RScfg/127.0.0.1:27001,127.0.0.1:27002,127.0.0.1:27003 --port 27000 --fork --logpath /home/mongo/dbc1/dbs.log --pidfilepath /home/mongo/dbc1/dbs.pid 
$ mongos --configdb RScfg/127.0.0.1:27001,127.0.0.1:27002,127.0.0.1:27003 --port 27100 --fork --logpath /home/mongo/dbc1/dbs2.log --pidfilepath /home/mongo/dbc1/dbs2.pid 


$ mongo --port 27000
> sh.addShard("RS1/127.0.0.1:27011,127.0.0.1:27012,127.0.0.1:27013")
> sh.addShard("RS2/127.0.0.1:27021,127.0.0.1:27022,127.0.0.1:27023")
> sh.status()

-- посмотрим загрузку
$ htop

нагенерим данные
> use bank
> sh.enableSharding("bank")
> db.settings.save({ _id:"chunksize", value: 1})
for (var i=0; i<210000; i++) { db.tickets.insert({name: "Max", amount: Math.random()*100}) }
> db.tickets.ensureIndex({amount: 1})
> db.tickets.stats()
> use admin
> db.runCommand({shardCollection: "test.tickets", key: {amount: 1}})
> sh.status()
